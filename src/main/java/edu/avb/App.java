/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.avb;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

import static java.util.stream.Collectors.*;


class Camera {
    Long id;
    String sourceDataUrl;
    String tokenDataUrl;

    public Camera(Long id, String sourceDataUrl, String tokenDataUrl) {
        this.id = id;
        this.sourceDataUrl = sourceDataUrl;
        this.tokenDataUrl = tokenDataUrl;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Camera camera = (Camera) o;
        return Objects.equals(id, camera.id) &&
                Objects.equals(sourceDataUrl, camera.sourceDataUrl) &&
                Objects.equals(tokenDataUrl, camera.tokenDataUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, sourceDataUrl, tokenDataUrl);
    }

    @Override
    public String toString() {
        return "Camera{" +
                "id=" + id +
                ", sourceDataUrl='" + sourceDataUrl + '\'' +
                ", tokenDataUrl='" + tokenDataUrl + '\'' +
                '}';
    }
}

class Source {
    String urlType;
    String videoUrl;
}

class Token {
    String value;
    Integer ttl;
}

class CameraInfo {
    public CameraInfo(Long id, String urlType, String videoUrl, String value, Integer ttl) {
        this.id = id;
        this.urlType = urlType;
        this.videoUrl = videoUrl;
        this.value = value;
        this.ttl = ttl;
    }

    Long id;
    String urlType;
    String videoUrl;
    String value;
    Integer ttl;

    @Override
    public String toString() {
        return "CameraInfo{" +
                "id=" + id +
                ", urlType='" + urlType + '\'' +
                ", videoUrl='" + videoUrl + '\'' +
                ", value='" + value + '\'' +
                ", ttl=" + ttl +
                '}';
    }
}

public class App {

    public static final String USER_AGENT_NAME = "Java 11 HttpClient Agent";

    private final HttpClient httpClient = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_2)
            .build();

    public static void main(String[] args) throws Exception {
        App obj = new App();
        obj.getCameraInfo();
    }

    List<Camera> getCameraList(String uri, HttpClient client) throws Exception {
        HttpRequest request = HttpRequest.newBuilder(URI.create(uri))
                .GET()
                .setHeader("User-Agent", USER_AGENT_NAME)
                .build();

        var list =
                client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                        .thenApply(HttpResponse::body)
                        .thenApply(json -> {
                                    System.out.println(Thread.currentThread());
                                    return (List<Camera>) (new Gson()).fromJson(json, new TypeToken<ArrayList<Camera>>() {}.getType());
                                }
                        )
                        .get(5, TimeUnit.SECONDS);
        return list;
    }

    private void getCameraInfo() throws Exception {

        var result = getCameraList("http://www.mocky.io/v2/5c51b9dd3400003252129fb5", httpClient).stream()
                .map(camera -> {
                    var futureSource = httpClient.sendAsync(
                            HttpRequest.newBuilder(URI.create(camera.sourceDataUrl))
                                    .GET()
                                    .setHeader("User-Agent", USER_AGENT_NAME)
                                    .build(),
                            HttpResponse.BodyHandlers.ofString())
                            .thenApply(HttpResponse::body)
                            .thenApply(json -> (Source) (new Gson()).fromJson(json, new TypeToken<Source>() {
                                    }.getType())
                            );
                    var futureToken = httpClient.sendAsync(
                            HttpRequest.newBuilder(URI.create(camera.tokenDataUrl))
                                    .GET()
                                    .setHeader("User-Agent", USER_AGENT_NAME)
                                    .build(),
                            HttpResponse.BodyHandlers.ofString())
                            .thenApply(HttpResponse::body)
                            .thenApply(json -> (Token) (new Gson()).fromJson(json, new TypeToken<Token>() {
                                    }.getType())
                            );

                    return futureSource.thenCombine(futureToken, (source, token) ->
                            new CameraInfo(camera.id, source.urlType, source.videoUrl, token.value, token.ttl));
                }
                ).collect(toList()) ;
        var listToJson = new ArrayList<CameraInfo>();
        for (CompletableFuture<CameraInfo> future : result) {
            listToJson.add(future.get());
        }

        Gson gson = new GsonBuilder()
                .setPrettyPrinting()
                .create();
        String json = gson.toJson(listToJson);
        System.out.println(json);
    }
}
